part of '../repository.dart';

class ApiDiscover {
  ApiDiscover(this._api);

  final _TmdbRepositoryBase _api;

  Future<DiscoverMovie> movieDiscover({
    int page,
    String language,
    String region,
    DiscoverMovieSortBy sortBy,
    String certificationCountry,
    String certification,
    String certificationGte,
    String certificationLte,
    bool includeAdult,
    bool includeVideo,
    int primaryReleaseYear,
    String primaryReleaseDateGte,
    String primaryReleaseDateLte,
    String releaseDateGte,
    String releaseDateLte,
    int withReleaseType,
    int year,
    int voteCountGte,
    int voteCountLte,
    num voteAverageGte,
    num voteAverageLte,
    String withCast,
    String withCrew,
    String withPeople,
    String withCompanies,
    String withGenres,
    String withoutGenres,
    String withKeywords,
    String withoutKeywords,
    int withRuntimeGte,
    int withRuntimeLte,
    String withOriginalLanguage,
  }) async {
    Map json = await _api.discover.movieDiscover(
      page: page,
      language: language,
      region: region,
      sortBy: sortBy?.toString(),
      certificationCountry: certificationCountry,
      certification: certification,
      certificationGte: certificationGte,
      certificationLte: certificationLte,
      includeAdult: includeAdult,
      includeVideo: includeVideo,
      primaryReleaseYear: primaryReleaseYear,
      primaryReleaseDateGte: primaryReleaseDateGte,
      primaryReleaseDateLte: primaryReleaseDateLte,
      releaseDateGte: releaseDateGte,
      releaseDateLte: releaseDateLte,
      withReleaseType: withReleaseType,
      year: year,
      voteCountGte: voteCountGte,
      voteCountLte: voteCountLte,
      voteAverageGte: voteAverageGte,
      voteAverageLte: voteAverageLte,
      withCast: withCast,
      withCrew: withCrew,
      withPeople: withPeople,
      withCompanies: withCompanies,
      withGenres: withGenres,
      withoutGenres: withoutGenres,
      withKeywords: withKeywords,
      withoutKeywords: withoutKeywords,
      withRuntimeGte: withRuntimeGte,
      withRuntimeLte: withRuntimeLte,
      withOriginalLanguage: withOriginalLanguage,
    );
    return DiscoverMovie.fromJson(json);
  }

  Future<DiscoverTv> tvDiscover({
    int page,
    String language,
    DiscoverTvSortBy sortBy,
    String airDateGte,
    String airDateLte,
    String firstAirDateGte,
    String firstAirDateLte,
    int firstAirDateYear,
    String timezone,
    int voteCountGte,
    num voteAverageGte,
    String withGenres,
    String withoutGenres,
    String withNetworks,
    int withRuntimeGte,
    int withRuntimeLte,
    bool includeNullFirstAirDates,
    String withOriginalLanguage,
    String withCompanies,
    String withKeywords,
    String withoutKeywords,
    bool screenedTheatrically,
  }) async {
    Map json = await _api.discover.tvDiscover(
      page: page,
      language: language,
      sortBy: sortBy?.toString(),
      airDateGte: airDateGte,
      airDateLte: airDateLte,
      firstAirDateGte: firstAirDateGte,
      firstAirDateLte: firstAirDateLte,
      firstAirDateYear: firstAirDateYear,
      timezone: timezone,
      voteCountGte: voteCountGte,
      voteAverageGte: voteAverageGte,
      withGenres: withGenres,
      withoutGenres: withoutGenres,
      withNetworks: withNetworks,
      withRuntimeGte: withRuntimeGte,
      withRuntimeLte: withRuntimeLte,
      includeNullFirstAirDates: includeNullFirstAirDates,
      withOriginalLanguage: withOriginalLanguage,
      withCompanies: withCompanies,
      withKeywords: withKeywords,
      withoutKeywords: withoutKeywords,
      screenedTheatrically: screenedTheatrically,
    );
    return DiscoverTv.fromJson(json);
  }
}
